{"version":3,"file":"index.umd.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/signers/ES256Signer.ts","../src/SignerAlgorithm.ts","../src/blockchains/bip122.ts","../src/blockchains/cosmos.ts","../src/blockchains/index.ts","../src/VerifierAlgorithm.ts","../src/Errors.ts","../src/ConditionalAlgorithm.ts","../src/JWT.ts","../src/encryption/JWE.ts","../src/encryption/xc20pDir.ts","../src/encryption/X25519-ECDH-ES.ts","../src/encryption/X25519-ECDH-1PU.ts","../src/encryption/ECDH.ts","../src/encryption/createEncrypter.ts","../src/encryption/xc20pEncryption.ts"],"sourcesContent":["import { concat, fromString, toString } from 'uint8arrays'\nimport { x25519 } from '@noble/curves/ed25519'\nimport type { EphemeralKeyPair } from './encryption/types.js'\nimport { varint } from 'multiformats'\nimport { BaseName, decode, encode } from 'multibase'\n\nconst u8a = { toString, fromString, concat }\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number\n}\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport type ECDSASignature = {\n  compact: Uint8Array\n  recovery?: number\n}\n\nexport type JsonWebKey = {\n  crv: string\n  kty: string\n  x?: string\n  y?: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\n// this is from the multicodec table https://github.com/multiformats/multicodec/blob/master/table.csv\nexport const supportedCodecs = {\n  'ed25519-pub': 0xed,\n  'x25519-pub': 0xec,\n  'secp256k1-pub': 0xe7,\n  'bls12_381-g1-pub': 0xea,\n  'bls12_381-g2-pub': 0xeb,\n  'p256-pub': 0x1200,\n}\n\n/**\n * Encodes the given byte array to a multibase string (defaulting to base58btc).\n * If a codec is provided, the corresponding multicodec prefix will be added.\n *\n * @param b - the Uint8Array to be encoded\n * @param base - the base to use for encoding (defaults to base58btc)\n * @param codec - the codec to use for encoding (defaults to no codec)\n *\n * @returns the multibase encoded string\n *\n * @public\n */\nexport function bytesToMultibase(\n  b: Uint8Array,\n  base: BaseName = 'base58btc',\n  codec?: keyof typeof supportedCodecs | number\n): string {\n  if (!codec) {\n    return u8a.toString(encode(base, b), 'utf-8')\n  } else {\n    const codecCode = typeof codec === 'string' ? supportedCodecs[codec] : codec\n    const prefixLength = varint.encodingLength(codecCode)\n    const multicodecEncoding = new Uint8Array(prefixLength + b.length)\n    varint.encodeTo(codecCode, multicodecEncoding) // set prefix\n    multicodecEncoding.set(b, prefixLength) // add the original bytes\n    return u8a.toString(encode(base, multicodecEncoding), 'utf-8')\n  }\n}\n\n/**\n * Converts a multibase string to the Uint8Array it represents.\n * This method will assume the byte array that is multibase encoded is a multicodec and will attempt to decode it.\n *\n * @param s - the string to be converted\n *\n * @throws if the string is not formatted correctly.\n *\n * @public\n */\nexport function multibaseToBytes(s: string): Uint8Array {\n  const bytes = decode(s)\n\n  // look for known key lengths first\n  // Ed25519/X25519, secp256k1/P256 compressed or not, BLS12-381 G1/G2 compressed\n  if ([32, 33, 48, 64, 65, 96].includes(bytes.length)) {\n    return bytes\n  }\n\n  // then assume multicodec, otherwise return the bytes\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [codec, length] = varint.decode(bytes)\n    return bytes.slice(length)\n  } catch (e) {\n    // not a multicodec, return the bytes\n    return bytes\n  }\n}\n\nexport function hexToBytes(s: string, minLength?: number): Uint8Array {\n  let input = s.startsWith('0x') ? s.substring(2) : s\n\n  if (input.length % 2 !== 0) {\n    input = `0${input}`\n  }\n\n  if (minLength) {\n    const paddedLength = Math.max(input.length, minLength * 2)\n    input = input.padStart(paddedLength, '00')\n  }\n\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function bytesToBigInt(b: Uint8Array): bigint {\n  return BigInt(`0x` + u8a.toString(b, 'base16'))\n}\n\nexport function bigintToBytes(n: bigint, minLength?: number): Uint8Array {\n  return hexToBytes(n.toString(16), minLength)\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'utf-8')\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = <number>recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam?: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag?: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), tag ? base64ToBytes(tag) : new Uint8Array(0)])\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n\n/**\n * Generate random x25519 key pair.\n */\nexport function generateKeyPair(): { secretKey: Uint8Array; publicKey: Uint8Array } {\n  const secretKey = x25519.utils.randomPrivateKey()\n  const publicKey = x25519.getPublicKey(secretKey)\n  return {\n    secretKey: secretKey,\n    publicKey: publicKey,\n  }\n}\n\n/**\n * Generate private-public x25519 key pair from `seed`.\n */\nexport function generateKeyPairFromSeed(seed: Uint8Array): { secretKey: Uint8Array; publicKey: Uint8Array } {\n  if (seed.length !== 32) {\n    throw new Error(`x25519: seed must be ${32} bytes`)\n  }\n  return {\n    publicKey: x25519.getPublicKey(seed),\n    secretKey: seed,\n  }\n}\n\nexport function genX25519EphemeralKeyPair(): EphemeralKeyPair {\n  const epk = generateKeyPair()\n  return {\n    publicKeyJWK: { kty: 'OKP', crv: 'X25519', x: bytesToBase64url(epk.publicKey) },\n    secretKey: epk.secretKey,\n  }\n}\n","import { sha256 as sha256Hash } from '@noble/hashes/sha256'\nexport { ripemd160 } from '@noble/hashes/ripemd160'\nimport { keccak_256 } from '@noble/hashes/sha3'\nimport { fromString, toString, concat } from 'uint8arrays'\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? fromString(payload) : payload\n  return sha256Hash(data)\n}\n\nexport const keccak = keccak_256\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(\n  secret: Uint8Array,\n  keyLen: number,\n  alg: string,\n  producerInfo?: Uint8Array,\n  consumerInfo?: Uint8Array\n): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = concat([\n    lengthAndInput(fromString(alg)),\n    lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), // apu\n    lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), // apv\n    writeUint32BE(keyLen),\n  ])\n\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return sha256(concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { leftpad, toJose } from '../util.js'\nimport { Signer } from '../JWT.js'\nimport { sha256 } from '../Digest.js'\nimport { secp256k1 } from '@noble/curves/secp256k1'\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: Uint8Array, recoverable = false): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const signature = secp256k1.sign(sha256(data), privateKeyBytes)\n    return toJose(\n      {\n        r: leftpad(signature.r.toString(16)),\n        s: leftpad(signature.s.toString(16)),\n        recoveryParam: signature.recovery,\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose, hexToBytes } from '../util.js'\nimport type { Signer } from '../JWT.js'\nimport { ES256KSigner } from './ES256KSigner.js'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexToBytes(hexPrivateKey), true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import type { Signer } from '../JWT.js'\nimport { hexToBytes } from '../util.js'\nimport { ES256KSigner } from './ES256KSigner.js'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexToBytes(hexPrivateKey))\n}\n\nexport default EllipticSigner\n","import { ed25519 } from '@noble/curves/ed25519'\nimport type { Signer } from '../JWT.js'\nimport { bytesToBase64url, stringToBytes } from '../util.js'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The private key is expected to be a `Uint8Array` of 32 bytes, but for compatibility 64 bytes are also acceptable.\n * Users of `@stablelib/ed25519` or `tweetnacl` will be able to use the 64 byte secret keys that library generates.\n * These libraries precompute the public key and append it as the last 32 bytes of the secretKey, to speed up later\n * signing operations.\n *\n *  The signing function itself takes the data as a `Uint8Array` or utf8 `string` and returns a `base64Url`-encoded\n * signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 32 or 64 byte secret key as `Uint8Array`\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = secretKey\n  if (![32, 64].includes(privateKeyBytes.length)) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 or 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const signature = ed25519.sign(dataBytes, privateKeyBytes.slice(0, 32))\n    return bytesToBase64url(signature)\n  }\n}\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner.js'\nimport type { Signer } from '../JWT.js'\nimport { base64ToBytes } from '../util.js'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a\n *   `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64ToBytes(base64PrivateKey))\n}\n\nexport default NaclSigner\n","import { leftpad, toJose } from '../util.js'\nimport { Signer } from '../JWT.js'\nimport { sha256 } from '../Digest.js'\nimport { p256 } from '@noble/curves/p256'\n\n/**\n *  Creates a configured signer function for signing data using the ES256 (secp256r1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256Signer(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256Signer(privateKey: Uint8Array): Signer {\n  if (privateKey.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKey.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const signature = p256.sign(sha256(data), privateKey)\n    return toJose({\n      r: leftpad(signature.r.toString(16)),\n      s: leftpad(signature.s.toString(16)),\n    })\n  }\n}\n","import type { Signer, SignerAlgorithm } from './JWT.js'\nimport { type EcdsaSignature, fromJose, toJose } from './util.js'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature)\n    } else {\n      return signature\n    }\n  }\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('invalid_config: expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256: ES256SignerAlg(),\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg(),\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","import { base58ToBytes, bytesToBase58, bytesToHex, hexToBytes } from '../util.js'\nimport { ripemd160, sha256 } from '../Digest.js'\n\nexport function publicKeyToAddress(publicKey: string, otherAddress: string): string {\n  // Use the same version/prefix byte as the given address.\n  const version = bytesToHex(base58ToBytes(otherAddress).slice(0, 1))\n  const publicKeyBuffer = hexToBytes(publicKey)\n  const publicKeyHash = ripemd160(sha256(publicKeyBuffer))\n  const step1 = version + bytesToHex(publicKeyHash)\n  const step2 = sha256(hexToBytes(step1))\n  const step3 = sha256(step2)\n  const checksum = bytesToHex(step3).substring(0, 8)\n  const step4 = step1 + checksum\n  return bytesToBase58(hexToBytes(step4))\n}\n","import { secp256k1 } from '@noble/curves/secp256k1'\nimport { bech32 } from '@scure/base'\nimport { sha256, ripemd160 } from '../Digest.js'\n\nexport function publicKeyToAddress(publicKey: string, prefix: string): string {\n  const publicKeyBuffer = secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes()\n  const hash = ripemd160(sha256(publicKeyBuffer))\n  const words = bech32.toWords(hash)\n  return bech32.encode(prefix, words).replace(prefix, '')\n}\n","import { publicKeyToAddress as bip122 } from './bip122.js'\nimport { publicKeyToAddress as cosmos } from './cosmos.js'\nimport { toEthereumAddress } from '../Digest.js'\n\nexport function verifyBlockchainAccountId(publicKey: string, blockchainAccountId: string | undefined): boolean {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':')\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = bip122(publicKey, chain[chain.length - 1])\n        break\n      case 'cosmos':\n        chain[chain.length - 1] = cosmos(publicKey, chain[1])\n        break\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey)\n        break\n      default:\n        return false\n    }\n    return chain.join(':').toLowerCase() === blockchainAccountId.toLowerCase()\n  }\n  return false\n}\n","import { sha256, toEthereumAddress } from './Digest.js'\nimport type { VerificationMethod } from 'did-resolver'\nimport {\n  base58ToBytes,\n  base64ToBytes,\n  bytesToBigInt,\n  bytesToHex,\n  EcdsaSignature,\n  ECDSASignature,\n  hexToBytes,\n  multibaseToBytes,\n  stringToBytes,\n} from './util.js'\nimport { verifyBlockchainAccountId } from './blockchains/index.js'\nimport { secp256k1 } from '@noble/curves/secp256k1'\nimport { p256 } from '@noble/curves/p256'\nimport { ed25519 } from '@noble/curves/ed25519'\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawSig: Uint8Array = base64ToBytes(signature)\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawSig.slice(0, 32))\n  const s: string = bytesToHex(rawSig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64]\n  }\n  return sigObj\n}\n\nexport function toSignatureObject2(signature: string, recoverable = false): ECDSASignature {\n  const bytes = base64ToBytes(signature)\n  if (bytes.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  return {\n    compact: bytes.slice(0, 64),\n    recovery: bytes[64],\n  }\n}\n\nexport function extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if (pk.publicKeyBase64) {\n    return base64ToBytes(pk.publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return secp256k1.ProjectivePoint.fromAffine({\n      x: bytesToBigInt(base64ToBytes(pk.publicKeyJwk.x)),\n      y: bytesToBigInt(base64ToBytes(pk.publicKeyJwk.y)),\n    }).toRawBytes(false)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'P-256' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return p256.ProjectivePoint.fromAffine({\n      x: bytesToBigInt(base64ToBytes(pk.publicKeyJwk.x)),\n      y: bytesToBigInt(base64ToBytes(pk.publicKeyJwk.y)),\n    }).toRawBytes(false)\n  } else if (\n    pk.publicKeyJwk &&\n    pk.publicKeyJwk.kty === 'OKP' &&\n    ['Ed25519', 'X25519'].includes(pk.publicKeyJwk.crv ?? '') &&\n    pk.publicKeyJwk.x\n  ) {\n    return base64ToBytes(pk.publicKeyJwk.x)\n  } else if (pk.publicKeyMultibase) {\n    return multibaseToBytes(pk.publicKeyMultibase)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256(data: string, signature: string, authenticators: VerificationMethod[]): VerificationMethod {\n  const hash = sha256(data)\n  const sig = p256.Signature.fromCompact(toSignatureObject2(signature).compact)\n  const fullPublicKeys = authenticators.filter((a: VerificationMethod) => !a.ethereumAddress && !a.blockchainAccountId)\n\n  const signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return p256.verify(sig, hash, pubBytes)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash = sha256(data)\n  const signatureNormalized = secp256k1.Signature.fromCompact(base64ToBytes(signature)).normalizeS()\n  const fullPublicKeys = authenticators.filter((a: VerificationMethod) => {\n    return !a.ethereumAddress && !a.blockchainAccountId\n  })\n  const blockchainAddressKeys = authenticators.filter((a: VerificationMethod) => {\n    return a.ethereumAddress || a.blockchainAccountId\n  })\n\n  let signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.verify(signatureNormalized, hash, pubBytes)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys)\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const signatures: ECDSASignature[] = []\n  if (signature.length > 86) {\n    signatures.push(toSignatureObject2(signature, true))\n  } else {\n    const so = toSignatureObject2(signature, false)\n    signatures.push({ ...so, recovery: 0 })\n    signatures.push({ ...so, recovery: 1 })\n  }\n  const hash = sha256(data)\n\n  const checkSignatureAgainstSigner = (sigObj: ECDSASignature): VerificationMethod | undefined => {\n    const signature = secp256k1.Signature.fromCompact(sigObj.compact).addRecoveryBit(sigObj.recovery || 0)\n    const recoveredPublicKey = signature.recoverPublicKey(hash)\n    const recoveredAddress = toEthereumAddress(recoveredPublicKey.toHex(false)).toLowerCase()\n    const recoveredPublicKeyHex = recoveredPublicKey.toHex(false)\n    const recoveredCompressedPublicKeyHex = recoveredPublicKey.toHex(true)\n\n    return authenticators.find((a: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(a))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        a.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        a.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress || // CAIP-2\n        verifyBlockchainAccountId(recoveredPublicKeyHex, a.blockchainAccountId) // CAIP-10\n      )\n    })\n  }\n\n  // Find first verification method\n  for (const signature of signatures) {\n    const verificationMethod = checkSignatureAgainstSigner(signature)\n    if (verificationMethod) return verificationMethod\n  }\n  // If no one found matching\n  throw new Error('invalid_signature: Signature invalid for JWT')\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear = stringToBytes(data)\n  const signatureBytes = base64ToBytes(signature)\n  const signer = authenticators.find((a: VerificationMethod) => {\n    return ed25519.verify(signatureBytes, clear, extractPublicKeyBytes(a))\n  })\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\n\ninterface Algorithms {\n  [name: string]: Verifier\n}\n\nconst algorithms: Algorithms = {\n  ES256: verifyES256,\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519,\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","/**\n * Error prefixes used for known verification failure cases.\n *\n * For compatibility, these error prefixes match the existing error messages, but will be adjusted in a future major\n * version update to match the scenarios better.\n *\n * @beta\n */\nexport const JWT_ERROR = {\n  /**\n   * Thrown when a JWT payload schema is unexpected or when validity period does not match\n   */\n  INVALID_JWT: 'invalid_jwt',\n  /**\n   * Thrown when the verifier audience does not match the one set in the JWT payload\n   */\n  INVALID_AUDIENCE: 'invalid_config',\n  /**\n   * Thrown when none of the public keys of the issuer match the signature of the JWT.\n   *\n   * This is equivalent to `NO_SUITABLE_KEYS` when the `proofPurpose` is NOT specified.\n   */\n  INVALID_SIGNATURE: 'invalid_signature',\n  /**\n   * Thrown when the DID document of the issuer does not have any keys that match the signature for the given\n   * `proofPurpose`.\n   *\n   * This is equivalent to `invalid_signature`, when a `proofPurpose` is specified.\n   */\n  NO_SUITABLE_KEYS: 'no_suitable_keys',\n  /**\n   * Thrown when the `alg` of the JWT or the encoding of the key is not supported\n   */\n  NOT_SUPPORTED: 'not_supported',\n  /**\n   * Thrown when the DID resolver is unable to resolve the issuer DID.\n   */\n  RESOLVER_ERROR: 'resolver_error',\n}\n","import type { VerificationMethod } from 'did-resolver'\nimport { JWT_ERROR } from './Errors.js'\nimport { type JWTDecoded, type JWTVerifyOptions, resolveAuthenticator, verifyJWT, verifyJWTDecoded } from './JWT.js'\n\nexport const CONDITIONAL_PROOF_2022 = 'ConditionalProof2022'\n\nexport async function verifyProof(\n  jwt: string,\n  { header, payload, signature, data }: JWTDecoded,\n  authenticator: VerificationMethod,\n  options: JWTVerifyOptions\n): Promise<VerificationMethod> {\n  if (authenticator.type === CONDITIONAL_PROOF_2022) {\n    return verifyConditionalProof(jwt, { payload, header, signature, data }, authenticator, options)\n  } else {\n    return verifyJWTDecoded({ header, payload, data, signature }, [authenticator])\n  }\n}\n\nexport async function verifyConditionalProof(\n  jwt: string,\n  { header, payload, signature, data }: JWTDecoded,\n  authenticator: VerificationMethod,\n  options: JWTVerifyOptions\n): Promise<VerificationMethod> {\n  // Validate the condition according to its condition property\n  if (authenticator.conditionWeightedThreshold) {\n    return verifyConditionWeightedThreshold(jwt, { header, payload, data, signature }, authenticator, options)\n  } else if (authenticator.conditionDelegated) {\n    return verifyConditionDelegated(jwt, { header, payload, data, signature }, authenticator, options)\n  }\n  // TODO other conditions\n\n  throw new Error(\n    `${JWT_ERROR.INVALID_JWT}: conditional proof type did not find condition for authenticator ${authenticator.id}.`\n  )\n}\n\nasync function verifyConditionWeightedThreshold(\n  jwt: string,\n  { header, payload, data, signature }: JWTDecoded,\n  authenticator: VerificationMethod,\n  options: JWTVerifyOptions\n): Promise<VerificationMethod> {\n  if (!authenticator.conditionWeightedThreshold || !authenticator.threshold) {\n    throw new Error('Expected conditionWeightedThreshold and threshold')\n  }\n\n  const issuers: string[] = []\n  const threshold = authenticator.threshold\n  let weightCount = 0\n\n  for (const weightedCondition of authenticator.conditionWeightedThreshold) {\n    const currentCondition = weightedCondition.condition\n    let foundSigner: VerificationMethod | undefined\n\n    try {\n      if (currentCondition.type === CONDITIONAL_PROOF_2022) {\n        if (!options.didAuthenticator) {\n          throw new Error('Expected didAuthenticator')\n        }\n\n        const newOptions: JWTVerifyOptions = {\n          ...options,\n          didAuthenticator: {\n            didResolutionResult: options.didAuthenticator?.didResolutionResult,\n            authenticators: [currentCondition],\n            issuer: currentCondition.id,\n          },\n        }\n        const { verified } = await verifyJWT(jwt, newOptions)\n        if (verified) {\n          foundSigner = currentCondition\n        }\n      } else {\n        foundSigner = await verifyJWTDecoded({ header, payload, data, signature }, currentCondition)\n      }\n    } catch (e) {\n      if (!(e as Error).message.startsWith(JWT_ERROR.INVALID_SIGNATURE)) throw e\n    }\n\n    if (foundSigner && !issuers.includes(foundSigner.id)) {\n      issuers.push(foundSigner.id)\n      weightCount += weightedCondition.weight\n\n      if (weightCount >= threshold) {\n        return authenticator\n      }\n    }\n  }\n  throw new Error(`${JWT_ERROR.INVALID_SIGNATURE}: condition for authenticator ${authenticator.id} is not met.`)\n}\n\nasync function verifyConditionDelegated(\n  jwt: string,\n  { header, payload, data, signature }: JWTDecoded,\n  authenticator: VerificationMethod,\n  options: JWTVerifyOptions\n): Promise<VerificationMethod> {\n  if (!authenticator.conditionDelegated) {\n    throw new Error('Expected conditionDelegated')\n  }\n  if (!options.resolver) {\n    throw new Error('Expected resolver')\n  }\n\n  let foundSigner: VerificationMethod | undefined\n\n  const issuer = authenticator.conditionDelegated\n  const didAuthenticator = await resolveAuthenticator(options.resolver, header.alg, issuer, options.proofPurpose)\n  const didResolutionResult = didAuthenticator.didResolutionResult\n\n  if (!didResolutionResult?.didDocument) {\n    throw new Error(`${JWT_ERROR.RESOLVER_ERROR}: Could not resolve delegated DID ${issuer}.`)\n  }\n\n  const delegatedAuthenticator = didAuthenticator.authenticators.find((authenticator) => authenticator.id === issuer)\n  if (!delegatedAuthenticator) {\n    throw new Error(\n      `${JWT_ERROR.NO_SUITABLE_KEYS}: Could not find delegated authenticator ${issuer} in it's DID Document`\n    )\n  }\n\n  if (delegatedAuthenticator.type === CONDITIONAL_PROOF_2022) {\n    const { verified } = await verifyJWT(jwt, {\n      ...options,\n      ...{\n        didAuthenticator: {\n          didResolutionResult,\n          authenticators: [delegatedAuthenticator],\n          issuer: delegatedAuthenticator.id,\n        },\n      },\n    })\n    if (verified) {\n      foundSigner = delegatedAuthenticator\n    }\n  } else {\n    try {\n      foundSigner = await verifyJWTDecoded({ header, payload, data, signature }, delegatedAuthenticator)\n    } catch (e) {\n      if (!(e as Error).message.startsWith('invalid_signature:')) throw e\n    }\n  }\n\n  if (foundSigner) {\n    return authenticator\n  }\n\n  throw new Error(`${JWT_ERROR.INVALID_SIGNATURE}: condition for authenticator ${authenticator.id} is not met.`)\n}\n","import canonicalizeData from 'canonicalize'\nimport { DIDDocument, DIDResolutionResult, parse, ParsedDID, Resolvable, VerificationMethod } from 'did-resolver'\nimport SignerAlg from './SignerAlgorithm.js'\nimport { decodeBase64url, EcdsaSignature, encodeBase64url } from './util.js'\nimport VerifierAlgorithm from './VerifierAlgorithm.js'\nimport { JWT_ERROR } from './Errors.js'\nimport { verifyProof } from './ConditionalAlgorithm.js'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport type ProofPurposeTypes =\n  | 'assertionMethod'\n  | 'authentication'\n  // | 'keyAgreement' // keyAgreement VerificationMethod should not be used for signing\n  | 'capabilityDelegation'\n  | 'capabilityInvocation'\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n  canonicalize?: boolean\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: ProofPurposeTypes\n  policies?: JWTVerifyPolicies\n  didAuthenticator?: DIDAuthenticator\n}\n\n/**\n * Overrides the different types of checks performed on the JWT besides the signature check\n */\nexport interface JWTVerifyPolicies {\n  // overrides the timestamp against which the validity interval is checked\n  now?: number\n  // when set to false, the timestamp checks ignore the Not Before(`nbf`) property\n  nbf?: boolean\n  // when set to false, the timestamp checks ignore the Issued At(`iat`) property\n  iat?: boolean\n  // when set to false, the timestamp checks ignore the Expires At(`exp`) property\n  exp?: boolean\n  // when set to false, the JWT audience check is skipped\n  aud?: boolean\n}\n\nexport interface JWSCreationOptions {\n  canonicalize?: boolean\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  exp?: number\n  rexp?: number\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\n/**\n * Result object returned by {@link verifyJWT}\n */\nexport interface JWTVerified {\n  /**\n   * Set to true for a JWT that passes all the required checks minus any verification overrides.\n   */\n  verified: true\n\n  /**\n   * The decoded JWT payload\n   */\n  payload: Partial<JWTPayload>\n\n  /**\n   * The result of resolving the issuer DID\n   */\n  didResolutionResult: DIDResolutionResult\n\n  /**\n   * the issuer DID\n   */\n  issuer: string\n\n  /**\n   * The public key of the issuer that matches the JWT signature\n   */\n  signer: VerificationMethod\n\n  /**\n   * The original JWT that was verified\n   */\n  jwt: string\n\n  /**\n   * Any overrides that were used during verification\n   */\n  policies?: JWTVerifyPolicies\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\n\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256: ['JsonWebKey2020'],\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n    /**\n     *  TODO - support R1 key as well\n     *   'ConditionalProof2022',\n     */\n    'JsonWebKey2020',\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n    'ConditionalProof2022',\n    'JsonWebKey2020',\n  ],\n  Ed25519: [\n    'ED25519SignatureVerification',\n    'Ed25519VerificationKey2018',\n    'Ed25519VerificationKey2020',\n    'JsonWebKey2020',\n  ],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018', 'Ed25519VerificationKey2020', 'JsonWebKey2020'],\n}\n\nexport const SELF_ISSUED_V2 = 'https://self-issued.me/v2'\nexport const SELF_ISSUED_V2_VC_INTEROP = 'https://self-issued.me/v2/openid-vc' // https://identity.foundation/jwt-vc-presentation-profile/#id-token-validation\nexport const SELF_ISSUED_V0_1 = 'https://self-issued.me'\n\ntype LegacyVerificationMethod = { publicKey?: string }\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction encodeSection(data: any, shouldCanonicalize = false): string {\n  if (shouldCanonicalize) {\n    return encodeBase64url(<string>canonicalizeData(data))\n  } else {\n    return encodeBase64url(JSON.stringify(data))\n  }\n}\n\nexport const NBF_SKEW = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`,\n    }\n  }\n  throw new Error('invalid_argument: Incorrect format JWS')\n}\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n * @param    {Object}            [recurse]          whether to recurse into the payload to decode any nested JWTs\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string, recurse = true): JWTDecoded {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    const iss = decodedJwt.payload.iss\n\n    if (decodedJwt.header.cty === 'JWT' && recurse) {\n      const innerDecodedJwt = decodeJWT(decodedJwt.payload.jwt)\n\n      if (innerDecodedJwt.payload.iss !== iss) throw new Error(`${JWT_ERROR.INVALID_JWT}: multiple issuers`)\n      return innerDecodedJwt\n    }\n    return decodedJwt\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\n *                                                    payload properties\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | Partial<JWTPayload>,\n  signer: Signer,\n  header: Partial<JWTHeader> = {},\n  options: JWSCreationOptions = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize)\n  const signingInput: string = [encodeSection(header, options.canonicalize), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n\n  // JWS Compact Serialization\n  // https://www.rfc-editor.org/rfc/rfc7515#section-7.1\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is\n * over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports:\n *   [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K. Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object}            header                optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or\n *   rejects with an error\n */\nexport async function createJWT(\n  payload: Partial<JWTPayload>,\n  { issuer, signer, alg, expiresIn, canonicalize }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('missing_signer: No Signer functionality has been configured')\n  if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined,\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = <number>(payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('invalid_argument: JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header, { canonicalize })\n}\n\n/**\n *  Creates a multi-signature signed JWT given multiple issuers and their corresponding signers, and a payload for which the signature is\n * over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {boolean}           options.expiresIn     optional flag to denote the expiration time\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object[]}          issuers               array of the issuers, their signers and algorithms\n *  @param    {string}            issuers[].issuer      The DID of the issuer (signer) of JWT\n *  @param    {Signer}            issuers[].signer      a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {String}            issuers[].alg         [DEPRECATED] The JWT signing algorithm to use. Supports:\n *   [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K. Please use `header.alg` to specify the algorithm\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or\n *   rejects with an error\n */\nexport async function createMultisignatureJWT(\n  payload: Partial<JWTPayload>,\n  { expiresIn, canonicalize }: Partial<JWTOptions>,\n  issuers: { issuer: string; signer: Signer; alg: string }[]\n): Promise<string> {\n  if (issuers.length === 0) throw new Error('invalid_argument: must provide one or more issuers')\n\n  let payloadResult: Partial<JWTPayload> = payload\n\n  let jwt = ''\n  for (let i = 0; i < issuers.length; i++) {\n    const issuer = issuers[i]\n\n    const header: Partial<JWTHeader> = {\n      typ: 'JWT',\n      alg: issuer.alg,\n    }\n\n    // Create nested JWT\n    // See Point 5 of https://www.rfc-editor.org/rfc/rfc7519#section-7.1\n    // After the first JWT is created (the first JWS), the next JWT is created by inputting the previous JWT as the payload\n    if (i !== 0) {\n      header.cty = 'JWT'\n    }\n\n    jwt = await createJWT(payloadResult, { ...issuer, canonicalize, expiresIn }, header)\n\n    payloadResult = { jwt }\n  }\n  return jwt\n}\n\nexport function verifyJWTDecoded(\n  { header, payload, data, signature }: JWTDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n\n  const iss = payload.iss\n  let recurse = true\n  do {\n    if (iss !== payload.iss) throw new Error(`${JWT_ERROR.INVALID_JWT}: multiple issuers`)\n\n    try {\n      const result = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n\n      return result\n    } catch (e) {\n      if (!(e as Error).message.startsWith(JWT_ERROR.INVALID_SIGNATURE)) throw e\n    }\n\n    // TODO probably best to create copy objects than replace reference objects\n    if (header.cty !== 'JWT') {\n      recurse = false\n    } else {\n      ;({ payload, header, signature, data } = decodeJWT(payload.jwt, false))\n    }\n  } while (recurse)\n\n  throw new Error(`${JWT_ERROR.INVALID_SIGNATURE}: no matching public key found`)\n}\n\nexport function verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\n *\n *  @example\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubKeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubKeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the DID document of the issuer of the JWT.\n *\n *  @example\n *  ```ts\n *  verifyJWT(\n *      'did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....',\n *      {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}\n *    ).then(obj => {\n *        const did = obj.did // DID of signer\n *        const payload = obj.payload\n *        const doc = obj.didResolutionResult.didDocument // DID Document of issuer\n *        const jwt = obj.jwt\n *        const signerKeyId = obj.signer.id // ID of key in DID document that signed JWT\n *        ...\n *    })\n *  ```\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the\n *   DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an\n *   error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: undefined,\n    auth: undefined,\n    audience: undefined,\n    callbackUrl: undefined,\n    skewTime: undefined,\n    proofPurpose: undefined,\n    policies: {},\n    didAuthenticator: undefined,\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt, false)\n  const proofPurpose: ProofPurposeTypes | undefined = Object.prototype.hasOwnProperty.call(options, 'auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n\n  let didUrl: string | undefined\n\n  if (!payload.iss && !payload.client_id) {\n    throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT iss or client_id are required`)\n  }\n\n  if (options.didAuthenticator) {\n    didUrl = options.didAuthenticator.issuer\n  } else if (payload.iss === SELF_ISSUED_V2 || payload.iss === SELF_ISSUED_V2_VC_INTEROP) {\n    if (!payload.sub) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT sub is required`)\n    }\n    if (typeof payload.sub_jwk === 'undefined') {\n      didUrl = payload.sub\n    } else {\n      didUrl = (header.kid || '').split('#')[0]\n    }\n  } else if (payload.iss === SELF_ISSUED_V0_1) {\n    if (!payload.did) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT did is required`)\n    }\n    didUrl = payload.did\n  } else if (!payload.iss && payload.scope === 'openid' && payload.redirect_uri) {\n    // SIOP Request payload\n    // https://identity.foundation/jwt-vc-presentation-profile/#self-issued-op-request-object\n    if (!payload.client_id) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT client_id is required`)\n    }\n    didUrl = payload.client_id\n  } else {\n    didUrl = payload.iss\n  }\n\n  if (!didUrl) {\n    throw new Error(`${JWT_ERROR.INVALID_JWT}: No DID has been found in the JWT`)\n  }\n\n  let authenticators: VerificationMethod[]\n  let issuer: string\n  let didResolutionResult: DIDResolutionResult\n  if (options.didAuthenticator) {\n    ;({ didResolutionResult, authenticators, issuer } = options.didAuthenticator)\n  } else {\n    ;({ didResolutionResult, authenticators, issuer } = await resolveAuthenticator(\n      options.resolver,\n      header.alg,\n      didUrl,\n      proofPurpose\n    ))\n    // Add to options object for recursive reference\n    options.didAuthenticator = { didResolutionResult, authenticators, issuer }\n  }\n\n  const { did } = parse(didUrl) as ParsedDID\n\n  let signer: VerificationMethod | null = null\n\n  if (did !== didUrl) {\n    const authenticator = authenticators.find((auth) => auth.id === didUrl)\n    if (!authenticator) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: No authenticator found for did URL ${didUrl}`)\n    }\n\n    signer = await verifyProof(jwt, { payload, header, signature, data }, authenticator, options)\n  } else {\n    let i = 0\n    while (!signer && i < authenticators.length) {\n      const authenticator = authenticators[i]\n      try {\n        signer = await verifyProof(jwt, { payload, header, signature, data }, authenticator, options)\n      } catch (e) {\n        if (!(e as Error).message.includes(JWT_ERROR.INVALID_SIGNATURE) || i === authenticators.length - 1) throw e\n      }\n\n      i++\n    }\n  }\n\n  if (signer) {\n    const now: number = typeof options.policies?.now === 'number' ? options.policies.now : Math.floor(Date.now() / 1000)\n    const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n\n    const nowSkewed = now + skewTime\n    if (options.policies?.nbf !== false && payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (options.policies?.iat !== false && payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (options.policies?.exp !== false && payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (options.policies?.aud !== false && payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error(\n          `${JWT_ERROR.INVALID_AUDIENCE}: JWT audience is required but your app address has not been configured`\n        )\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`${JWT_ERROR.INVALID_AUDIENCE}: JWT audience does not match your DID or callback url`)\n      }\n    }\n\n    return { verified: true, payload, didResolutionResult, issuer, signer, jwt, policies: options.policies }\n  }\n  throw new Error(\n    `${JWT_ERROR.INVALID_SIGNATURE}: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`\n  )\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of\n * provided DID\n *\n *  @example\n *  ```ts\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      // ...\n *  })\n *  ```\n *\n *  @param resolver - {Resolvable} a DID resolver function that can obtain the `DIDDocument` for the `issuer`\n *  @param alg - {String} a JWT algorithm\n *  @param issuer - {String} a Decentralized Identifier (DID) to lookup\n *  @param proofPurpose - {ProofPurposeTypes} *Optional* Use the verificationMethod linked in that section of the\n *   issuer DID document\n *  @return {Promise<DIDAuthenticator>} a promise which resolves with an object containing an array of authenticators\n *   or rejects with an error if none exist\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  proofPurpose?: ProofPurposeTypes\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`${JWT_ERROR.NOT_SUPPORTED}: No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON },\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error || didResult.didDocument == null) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(\n      `${JWT_ERROR.RESOLVER_ERROR}: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`\n    )\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid?: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || []),\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (\n      proofPurpose.startsWith('assertion') &&\n      !Object.getOwnPropertyNames(didResult?.didDocument).includes('assertionMethod')\n    ) {\n      didResult.didDocument = { ...(<DIDDocument>didResult.didDocument) }\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<LegacyVerificationMethod>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<LegacyVerificationMethod>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null) as VerificationMethod[]\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `${JWT_ERROR.NO_SUITABLE_KEYS}: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`${JWT_ERROR.NO_SUITABLE_KEYS}: DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { base64ToBytes, bytesToBase64url, decodeBase64url, stringToBytes, toSealed } from '../util.js'\nimport type { Decrypter, Encrypter, EncryptionResult, EphemeralKeyPair, JWE, ProtectedHeader } from './types.js'\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: <string>protectedHeader,\n    iv: bytesToBase64url(iv ?? new Uint8Array(0)),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag ?? new Uint8Array(0)),\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader: ProtectedHeader = {},\n  aad?: Uint8Array,\n  useSingleEphemeralKey = false\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('invalid_argument: Incompatible encrypters passed')\n    }\n    let cek: Uint8Array | undefined\n    let jwe: JWE | undefined\n    let epk: EphemeralKeyPair | undefined\n    if (useSingleEphemeralKey) {\n      epk = encrypters[0].genEpk?.()\n      const alg = encrypters[0].alg\n      protectedHeader = { ...protectedHeader, alg, epk: epk?.publicKeyJWK }\n    }\n\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad, epk)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        const recipient = await encrypter.encryptCek?.(cek, epk)\n        if (recipient) {\n          jwe?.recipients?.push(recipient)\n        }\n      }\n    }\n    return <JWE>jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc)\n    throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = stringToBytes(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected)\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('bad_jwe: missing recipients')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('failure: Failed to decrypt')\n  return cleartext\n}\n","import type { Decrypter, Encrypter, EncryptionResult, ProtectedHeader } from './types.js'\nimport { bytesToBase64url, encodeBase64url, stringToBytes } from '../util.js'\nimport { xchacha20poly1305 } from '@noble/ciphers/chacha'\nimport { randomBytes } from '@noble/hashes/utils'\n\nexport function xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(24)\n    const cipher = xchacha20poly1305(key, iv, aad)\n    const sealed = cipher.encrypt(cleartext)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - 16),\n      tag: sealed.subarray(sealed.length - 16),\n      iv,\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = stringToBytes(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader)\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader,\n    }\n  }\n\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  async function decrypt(sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array): Promise<Uint8Array | null> {\n    try {\n      return xchacha20poly1305(key, iv, aad).decrypt(sealed)\n    } catch (error) {\n      return null\n    }\n  }\n\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n","import type { ECDH, EphemeralKeyPair, Recipient } from './types.js'\nimport { base64ToBytes, bytesToBase64url, generateKeyPair, generateKeyPairFromSeed } from '../util.js'\nimport { concatKDF } from '../Digest.js'\nimport { x25519 } from '@noble/curves/ed25519'\n\nexport async function computeX25519EcdhEsKek(recipient: Recipient, receiverSecret: Uint8Array | ECDH, alg: string) {\n  const crv = 'X25519'\n  const keyLen = 256\n  const header = recipient.header\n  if (header.epk?.crv !== crv || typeof header.epk.x == 'undefined') return null\n  const publicKey = base64ToBytes(header.epk.x)\n  let sharedSecret\n  if (receiverSecret instanceof Uint8Array) {\n    sharedSecret = x25519.getSharedSecret(receiverSecret, publicKey)\n  } else {\n    sharedSecret = await receiverSecret(publicKey)\n  }\n\n  // Key Encryption Key\n  let producerInfo: Uint8Array | undefined = undefined\n  let consumerInfo: Uint8Array | undefined = undefined\n  if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n  if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n  return concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n}\n\nexport async function createX25519EcdhEsKek(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH | undefined, // unused\n  alg: string,\n  apu: string | undefined, // unused\n  apv: string | undefined,\n  ephemeralKeyPair: EphemeralKeyPair | undefined\n) {\n  const crv = 'X25519'\n  const keyLen = 256\n  const ephemeral = ephemeralKeyPair ? generateKeyPairFromSeed(ephemeralKeyPair.secretKey) : generateKeyPair()\n  const epk = { kty: 'OKP', crv, x: bytesToBase64url(ephemeral.publicKey) }\n  const sharedSecret = x25519.getSharedSecret(ephemeral.secretKey, recipientPublicKey)\n  // Key Encryption Key\n  const consumerInfo = base64ToBytes(apv ?? '')\n  const kek = concatKDF(sharedSecret, keyLen, alg, undefined, consumerInfo)\n  return { epk, kek }\n}\n","import type { ECDH, EphemeralKeyPair, Recipient } from './types.js'\nimport { base64ToBytes, bytesToBase64url, generateKeyPair, generateKeyPairFromSeed } from '../util.js'\nimport { concatKDF } from '../Digest.js'\nimport { x25519 } from '@noble/curves/ed25519'\nexport async function computeX25519Ecdh1PUv3Kek(\n  recipient: Recipient,\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array,\n  alg: string\n) {\n  const crv = 'X25519'\n  const keyLen = 256\n  const header = recipient.header\n  if (header.epk?.crv !== crv || typeof header.epk.x == 'undefined') return null\n  // ECDH-1PU requires additional shared secret between\n  // static key of sender and static key of recipient\n  const publicKey = base64ToBytes(header.epk.x)\n  let zE: Uint8Array\n  let zS: Uint8Array\n\n  if (recipientSecret instanceof Uint8Array) {\n    zE = x25519.getSharedSecret(recipientSecret, publicKey)\n    zS = x25519.getSharedSecret(recipientSecret, senderPublicKey)\n  } else {\n    zE = await recipientSecret(publicKey)\n    zS = await recipientSecret(senderPublicKey)\n  }\n\n  const sharedSecret = new Uint8Array(zE.length + zS.length)\n  sharedSecret.set(zE)\n  sharedSecret.set(zS, zE.length)\n\n  // Key Encryption Key\n  let producerInfo\n  let consumerInfo\n  if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n  if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n\n  return concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n}\n\nexport async function createX25519Ecdh1PUv3Kek(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  alg: string, // must be provided as this is the key agreement alg + the key wrapper alg, Example: 'ECDH-ES+A256KW'\n  apu: string | undefined,\n  apv: string | undefined,\n  ephemeralKeyPair: EphemeralKeyPair | undefined\n) {\n  const crv = 'X25519'\n  const keyLen = 256\n  const ephemeral = ephemeralKeyPair ? generateKeyPairFromSeed(ephemeralKeyPair.secretKey) : generateKeyPair()\n  const epk = { kty: 'OKP', crv, x: bytesToBase64url(ephemeral.publicKey) }\n  const zE = x25519.getSharedSecret(ephemeral.secretKey, recipientPublicKey)\n\n  // ECDH-1PU requires additional shared secret between\n  // static key of sender and static key of recipient\n  let zS\n  if (senderSecret instanceof Uint8Array) {\n    zS = x25519.getSharedSecret(senderSecret, recipientPublicKey)\n  } else {\n    zS = await senderSecret(recipientPublicKey)\n  }\n\n  const sharedSecret = new Uint8Array(zE.length + zS.length)\n  sharedSecret.set(zE)\n  sharedSecret.set(zS, zE.length)\n\n  let partyUInfo: Uint8Array = new Uint8Array(0)\n  let partyVInfo: Uint8Array = new Uint8Array(0)\n  if (apu) partyUInfo = base64ToBytes(apu)\n  if (apv) partyVInfo = base64ToBytes(apv)\n\n  // Key Encryption Key\n  const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo)\n  return { epk, kek }\n}\n","import { x25519 } from '@noble/curves/ed25519'\nimport type { ECDH } from './types.js'\n\n/**\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\n *\n * @throws 'invalid_argument:...' if the secret key size is wrong\n */\nexport function createX25519ECDH(mySecretKey: Uint8Array): ECDH {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519')\n  }\n  return async (theirPublicKey: Uint8Array): Promise<Uint8Array> => {\n    if (theirPublicKey.length !== 32) {\n      throw new Error('invalid_argument: incorrect publicKey key length for X25519')\n    }\n    return x25519.getSharedSecret(mySecretKey, theirPublicKey)\n  }\n}\n","import type {\n  AuthEncryptParams,\n  ContentEncrypter,\n  ECDH,\n  Encrypter,\n  EncryptionResult,\n  EphemeralKeyPair,\n  KekCreator,\n  KeyWrapper,\n  ProtectedHeader,\n  Recipient,\n} from './types.js'\nimport { bytesToBase64url, genX25519EphemeralKeyPair } from '../util.js'\nimport { randomBytes } from '@noble/hashes/utils'\n\nexport function createFullEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH | undefined,\n  options: Partial<AuthEncryptParams> = {},\n  kekCreator: KekCreator,\n  keyWrapper: KeyWrapper,\n  contentEncrypter: ContentEncrypter\n): Encrypter {\n  async function encryptCek(cek: Uint8Array, ephemeralKeyPair?: EphemeralKeyPair): Promise<Recipient> {\n    const { epk, kek } = await kekCreator.createKek(\n      recipientPublicKey,\n      senderSecret,\n      `${kekCreator.alg}+${keyWrapper.alg}`,\n      options.apu,\n      options.apv,\n      ephemeralKeyPair\n    )\n    const res = await keyWrapper.from(kek).wrap(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {},\n    }\n    if (res.iv) recipient.header.iv = bytesToBase64url(res.iv)\n    if (res.tag) recipient.header.tag = bytesToBase64url(res.tag)\n    if (options.kid) recipient.header.kid = options.kid\n    if (options.apu) recipient.header.apu = options.apu\n    if (options.apv) recipient.header.apv = options.apv\n    if (!ephemeralKeyPair) {\n      recipient.header.alg = `${kekCreator.alg}+${keyWrapper.alg}`\n      recipient.header.epk = epk\n    }\n\n    return recipient\n  }\n\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array,\n    ephemeralKeyPair?: EphemeralKeyPair\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    const recipient: Recipient = await encryptCek(cek, ephemeralKeyPair)\n    // getting an ephemeral key means the epk is set only once per all recipients\n    if (ephemeralKeyPair) {\n      protectedHeader.alg = `${kekCreator.alg}+${keyWrapper.alg}`\n      protectedHeader.epk = ephemeralKeyPair.publicKeyJWK\n    }\n    return {\n      ...(await contentEncrypter.from(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient,\n      cek,\n    }\n  }\n\n  return { alg: keyWrapper.alg, enc: contentEncrypter.enc, encrypt, encryptCek, genEpk: genX25519EphemeralKeyPair }\n}\n","import type { Resolvable, VerificationMethod } from 'did-resolver'\nimport type {\n  AnonEncryptParams,\n  AuthEncryptParams,\n  Decrypter,\n  ECDH,\n  Encrypter,\n  KeyWrapper,\n  ProtectedHeader,\n  Recipient,\n  WrappingResult,\n} from './types.js'\nimport { base64ToBytes, toSealed } from '../util.js'\nimport { xc20pDirDecrypter, xc20pDirEncrypter, xc20pEncrypter } from './xc20pDir.js'\nimport { computeX25519Ecdh1PUv3Kek, createX25519Ecdh1PUv3Kek } from './X25519-ECDH-1PU.js'\nimport { computeX25519EcdhEsKek, createX25519EcdhEsKek } from './X25519-ECDH-ES.js'\nimport { extractPublicKeyBytes } from '../VerifierAlgorithm.js'\nimport { createFullEncrypter } from './createEncrypter.js'\n\n/**\n * @deprecated Use\n *   {@link xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2 | xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2() } instead\n */\nexport function createAuthEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options)\n}\n\n/**\n * @deprecated Use {@link xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2 | xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2() }\n *   instead\n */\nexport function createAnonEncrypter(publicKey: Uint8Array, options: Partial<AnonEncryptParams> = {}): Encrypter {\n  return xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2(publicKey, options)\n}\n\n/**\n * @deprecated Use\n *   {@link xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2 | xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2() } instead\n */\nexport function createAuthDecrypter(recipientSecret: Uint8Array | ECDH, senderPublicKey: Uint8Array): Decrypter {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey)\n}\n\n/**\n * @deprecated Use {@link xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2 | xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2() }\n *   instead\n */\nexport function createAnonDecrypter(recipientSecret: Uint8Array | ECDH): Decrypter {\n  return xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2(recipientSecret)\n}\n\nexport function validateHeader(header?: ProtectedHeader): Required<Pick<ProtectedHeader, 'epk' | 'iv' | 'tag'>> {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header')\n  }\n  return header as Required<Pick<ProtectedHeader, 'epk' | 'iv' | 'tag'>>\n}\n\nexport const xc20pKeyWrapper: KeyWrapper = {\n  from: (wrappingKey: Uint8Array) => {\n    const wrap = async (cek: Uint8Array): Promise<WrappingResult> => {\n      return xc20pEncrypter(wrappingKey)(cek)\n    }\n    return { wrap }\n  },\n\n  alg: 'XC20PKW',\n}\n\n/**\n * @deprecated Use {@link xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2 | xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2() }\n *   instead\n */\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string, apv?: string): Encrypter {\n  return xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2(publicKey, { kid, apv })\n}\n\n/**\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\n *\n * @param recipientPublicKey - the byte array representing the recipient public key\n * @param options - {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n */\nexport function xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  options: Partial<AnonEncryptParams> = {}\n): Encrypter {\n  return createFullEncrypter(\n    recipientPublicKey,\n    undefined,\n    options,\n    { createKek: createX25519EcdhEsKek, alg: 'ECDH-ES' },\n    xc20pKeyWrapper,\n    { from: (cek: Uint8Array) => xc20pDirEncrypter(cek), enc: 'XC20P' }\n  )\n}\n\n/**\n *  Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\n *  sender private key to encrypt the data).\n *  Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n *  {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n *  @param recipientPublicKey - the byte array representing the recipient public key\n *  @param senderSecret - either a Uint8Array representing the sender secret key or\n *    an ECDH function that wraps the key and can promise a shared secret given a public key\n *  @param options - {@link AuthEncryptParams} used to specify extra header parameters\n *\n *  @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n *  NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n *  are subject to change as new revisions or until the official CFRG specification are released.\n *\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return createFullEncrypter(\n    recipientPublicKey,\n    senderSecret,\n    options,\n    { createKek: createX25519Ecdh1PUv3Kek, alg: 'ECDH-1PU' },\n    xc20pKeyWrapper,\n    { from: (cek: Uint8Array) => xc20pDirEncrypter(cek), enc: 'XC20P' }\n  )\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]> {\n  const encryptersForDID = async (did: string, resolved: string[] = []): Promise<Encrypter[]> => {\n    const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n    resolved.push(did)\n    if (didResolutionMetadata?.error || didDocument == null) {\n      throw new Error(\n        `resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n      )\n    }\n    let controllerEncrypters: Encrypter[] = []\n    if (!didDocument.controller && !didDocument.keyAgreement) {\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    }\n    if (didDocument.controller) {\n      let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller]\n      controllers = controllers.filter((c) => !resolved.includes(c))\n      const encrypterPromises = controllers.map((did) =>\n        encryptersForDID(did, resolved).catch(() => {\n          return []\n        })\n      )\n      const encrypterArrays = await Promise.all(encrypterPromises)\n      controllerEncrypters = ([] as Encrypter[]).concat(...encrypterArrays)\n    }\n    const agreementKeys: VerificationMethod[] = didDocument.keyAgreement\n      ?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      ?.filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n    const pks =\n      agreementKeys?.filter((key) => {\n        return key.type === 'X25519KeyAgreementKey2019' || key.type === 'X25519KeyAgreementKey2020'\n      }) || []\n    if (!pks.length && !controllerEncrypters.length)\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    return pks.map((pk) => x25519Encrypter(extractPublicKeyBytes(pk), pk.id)).concat(...controllerEncrypters)\n  }\n\n  const encrypterPromises = dids.map((did) => encryptersForDID(did))\n  const encrypterArrays = await Promise.all(encrypterPromises)\n  return ([] as Encrypter[]).concat(...encrypterArrays)\n}\n\n/**\n * @deprecated Use {@link xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2 | xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2() }\n *   instead\n */\nexport function x25519Decrypter(receiverSecret: Uint8Array | ECDH): Decrypter {\n  return xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2(receiverSecret)\n}\n\n/**\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\n *\n * @param recipientSecret - either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2(recipientSecret: Uint8Array | ECDH): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const enc = 'XC20P'\n\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    const header = validateHeader(recipient.header)\n\n    const kek = await computeX25519EcdhEsKek(recipient, recipientSecret, alg)\n    if (!kek) return null\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n\n  return { alg, enc, decrypt }\n}\n\n/**\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\n * sender public key to decrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientSecret - either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param senderPublicKey - the byte array representing the sender public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n *\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array\n): Decrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const enc = 'XC20P'\n\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    const header = validateHeader(recipient.header)\n    const kek = await computeX25519Ecdh1PUv3Kek(recipient, recipientSecret, senderPublicKey, alg)\n    if (!kek) return null\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n\n  return { alg, enc, decrypt }\n}\n"],"names":["u8a","toString","fromString","concat","bytesToBase64url","b","base64ToBytes","s","inputBase64Url","replace","base58ToBytes","bytesToBase58","supportedCodecs","bytesToMultibase","base","codec","encode","codecCode","prefixLength","varint","encodingLength","multicodecEncoding","Uint8Array","length","encodeTo","set","multibaseToBytes","bytes","decode","includes","slice","e","hexToBytes","minLength","input","startsWith","substring","paddedLength","Math","max","padStart","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","bytesToBigInt","BigInt","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Error","fromJose","signature","signatureBytes","TypeError","undefined","toSealed","ciphertext","tag","leftpad","data","size","repeat","generateKeyPair","secretKey","x25519","utils","randomPrivateKey","publicKey","getPublicKey","generateKeyPairFromSeed","seed","genX25519EphemeralKeyPair","epk","publicKeyJWK","kty","crv","x","sha256","payload","sha256Hash","keccak","keccak_256","toEthereumAddress","hexPublicKey","hashInput","writeUint32BE","value","array","encoded","lengthAndInput","concatKDF","secret","keyLen","alg","producerInfo","consumerInfo","roundNumber","ES256KSigner","privateKey","privateKeyBytes","secp256k1","sign","recovery","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","dataBytes","ed25519","NaclSigner","base64PrivateKey","ES256Signer","p256","instanceOfEcdsaSignature","object","ES256SignerAlg","ES256KSignerAlg","Ed25519SignerAlg","algorithms","ES256","ES256K","Ed25519","EdDSA","SignerAlg","impl","publicKeyToAddress","otherAddress","version","publicKeyBuffer","publicKeyHash","ripemd160","step1","step2","step3","checksum","step4","prefix","ProjectivePoint","fromHex","toRawBytes","hash","words","bech32","toWords","verifyBlockchainAccountId","blockchainAccountId","chain","split","bip122","cosmos","join","toSignatureObject","rawSig","sigObj","toSignatureObject2","compact","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","publicKeyJwk","y","fromAffine","publicKeyMultibase","verifyES256","authenticators","sig","Signature","fromCompact","fullPublicKeys","filter","a","ethereumAddress","find","pubBytes","verify","err","verifyES256K","signatureNormalized","normalizeS","blockchainAddressKeys","verifyRecoverableES256K","signatures","push","so","checkSignatureAgainstSigner","addRecoveryBit","recoveredPublicKey","recoverPublicKey","recoveredAddress","toHex","recoveredPublicKeyHex","recoveredCompressedPublicKeyHex","keyHex","verificationMethod","verifyEd25519","clear","VerifierAlgorithm","JWT_ERROR","INVALID_JWT","INVALID_AUDIENCE","INVALID_SIGNATURE","NO_SUITABLE_KEYS","NOT_SUPPORTED","RESOLVER_ERROR","verifyConditionDelegated","jwt","header","authenticator","options","conditionDelegated","resolver","foundSigner","issuer","resolveAuthenticator","proofPurpose","didAuthenticator","id","didResolutionResult","didDocument","delegatedAuthenticator","type","CONDITIONAL_PROOF_2022","verifyJWT","verified","verifyJWTDecoded","message","then","observer","pact","prototype","onFulfilled","result","state","callback","_settle","verifyConditionWeightedThreshold","conditionWeightedThreshold","threshold","issuers","weightCount","weightedCondition","weight","currentCondition","condition","newOptions","verifyConditionalProof","verifyProof","o","update","shouldContinue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","types","SUPPORTED_PUBLIC_KEY_TYPES","didResult","resolve","accept","DID_JSON","Object","getOwnPropertyNames","indexOf","didDocumentMetadata","didResolutionMetadata","contentType","error","getPublicKeyById","verificationMethods","pubid","filtered","publicKeysToCheck","assertionMethod","map","key","supported","auth","audience","callbackUrl","skewTime","policies","now","floor","Date","NBF_SKEW","nowSkewed","nbf","iat","exp","aud","audArray","Array","isArray","matchedAudience","item","did","parse","didUrl","i","decodeJWT","hasOwnProperty","call","iss","client_id","SELF_ISSUED_V2","SELF_ISSUED_V2_VC_INTEROP","sub","sub_jwk","kid","SELF_ISSUED_V0_1","scope","redirect_uri","createMultisignatureJWT","expiresIn","canonicalize","payloadResult","typ","cty","createJWT","timestamps","fullPayload","createJWS","defaultAlg","encodedPayload","encodeSection","signingInput","jwtSigner","shouldCanonicalize","canonicalizeData","JSON","stringify","decodeJWS","jws","parts","match","recurse","decodedJwt","assign","innerDecodedJwt","pubKeys","verifyJWSDecoded","verifyJWS","jwsDecoded","bind","_this","onRejected","thenable","validateJWE","jwe","protected","iv","recipients","rec","encrypted_key","encodeJWE","protectedHeader","recipient","aad","decryptJWE","decrypter","cleartext","protHeader","enc","sealed","decrypt","createJWE","encrypters","useSingleEphemeralKey","encrypt","encryptionResult","tmpEnc","reduce","acc","encrypter","cek","genEpk","encryptCek","xc20pEncrypter","randomBytes","cipher","xchacha20poly1305","subarray","xc20pDirEncrypter","encodedAad","xc20pEncrypt","xc20pDirDecrypter","createX25519EcdhEsKek","recipientPublicKey","senderSecret","apu","apv","ephemeralKeyPair","ephemeral","sharedSecret","getSharedSecret","kek","computeX25519EcdhEsKek","receiverSecret","createX25519Ecdh1PUv3Kek","zE","zS","partyUInfo","partyVInfo","computeX25519Ecdh1PUv3Kek","recipientSecret","senderPublicKey","createX25519ECDH","mySecretKey","theirPublicKey","createFullEncrypter","kekCreator","keyWrapper","contentEncrypter","from","createKek","wrap","res","resolveX25519Encrypters","dids","encryptersForDID","resolved","agreementKeys","keyAgreement","pks","controllerEncrypters","x25519Encrypter","controller","controllers","c","encrypterPromises","catch","Promise","all","encrypterArrays","createAuthEncrypter","xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonEncrypter","xc20pAnonEncrypterEcdhESx25519WithXc20PkwV2","createAuthDecrypter","xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonDecrypter","xc20pAnonDecrypterEcdhESx25519WithXc20PkwV2","validateHeader","xc20pKeyWrapper","wrappingKey","x25519Decrypter","sealedCek"],"mappings":"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"}